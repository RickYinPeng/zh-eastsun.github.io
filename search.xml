<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python3爬虫(requests+bs4)</title>
      <link href="/2018/12/17/python3%E7%88%AC%E8%99%AB-requests-bs4/"/>
      <url>/2018/12/17/python3%E7%88%AC%E8%99%AB-requests-bs4/</url>
      
        <content type="html"><![CDATA[<h1 id="python3-使用requests-bs4编写爬虫"><a href="#python3-使用requests-bs4编写爬虫" class="headerlink" title="python3:使用requests+bs4编写爬虫"></a>python3:使用requests+bs4编写爬虫</h1><h2 id="requests框架"><a href="#requests框架" class="headerlink" title="requests框架"></a>requests框架</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(requests.__version__)</span><br></pre></td></tr></table></figure><blockquote><p>版本很重要，因为有些低版本的requests在进行https请求时无法禁用ssl验证，在请求https网站的时候会报错</p></blockquote><h3 id="更新requests"><a href="#更新requests" class="headerlink" title="更新requests"></a>更新requests</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --upgrade requests</span><br></pre></td></tr></table></figure><h3 id="发起请求并获取结果"><a href="#发起请求并获取结果" class="headerlink" title="发起请求并获取结果"></a>发起请求并获取结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://www.baidu.com&quot;</span><br><span class="line"># 发起get请求</span><br><span class="line">response = requests.get(url)</span><br><span class="line"># 发起post请求</span><br><span class="line">response = requests.post(url)</span><br><span class="line"># 发起XXX请求</span><br><span class="line">response = requests.XXX(url)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>响应结果编码格式的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># requests框架会自动解析response并自动设置解码方式，可以通过如下代码查看解码方式</span><br><span class="line">print(response.encoding)</span><br><span class="line"># 但是其自动解析的结果并不一定是正确的，如果使用bs4框架解析html产生乱码，那么可能是编码格式出现了错误</span><br><span class="line"># 这时我们可以自己查看html的信息看其具体的编码格式然后手动设置，如下代码：</span><br><span class="line">requests.encoding = &apos;utf-8&apos;</span><br><span class="line"># 当然此处设置的解码方式要和bs4使用的解码方式一致（bs4的解码方式请看bs4框架）</span><br></pre></td></tr></table></figure><h2 id="bs4框架"><a href="#bs4框架" class="headerlink" title="bs4框架"></a>bs4框架</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><h3 id="设置解析器"><a href="#设置解析器" class="headerlink" title="设置解析器"></a>设置解析器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 此处的parser就是我们指定的解析器，bs4支持多种解析器，根据不同的需求会指定不同的解析器</span><br><span class="line"># 关于解析器的内容可以查看中文官方文档</span><br><span class="line">soup = bs4.BeautifulSoup(markup=response,features=&apos;parser&apos;)</span><br></pre></td></tr></table></figure><h3 id="解析某一元素"><a href="#解析某一元素" class="headerlink" title="解析某一元素"></a>解析某一元素</h3><ul><li>解析title</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.title)</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul><li>编码格式的问题</li></ul><p>在使用bs4框架进行解析时框架默认解析格式是‘utf-8’，如果原文档的编码格式不是utf-8那么将出现乱码，所以在使用时一定要注意使用bs4时解码的格式要和requests解码的格式保持一致，否则将出现乱码。</p><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python3 requests库保持连接cookie</title>
      <link href="/2018/12/03/python3-requests%E5%BA%93%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5cookie/"/>
      <url>/2018/12/03/python3-requests%E5%BA%93%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="requests库保持连接cookie"><a href="#requests库保持连接cookie" class="headerlink" title="requests库保持连接cookie"></a>requests库保持连接cookie</h1><h2 id="requests库的使用方式"><a href="#requests库的使用方式" class="headerlink" title="requests库的使用方式"></a>requests库的使用方式</h2><ul><li>requests库发起网络请求的方式：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://域名&quot;</span><br><span class="line">header = &#123;key:value&#125;</span><br><span class="line">body = &#123;body&#125;</span><br><span class="line"># 发起get请求</span><br><span class="line">response = requests.get(url,header)</span><br><span class="line"># 发起post请求</span><br><span class="line">response = requests.post(url,header,body)</span><br></pre></td></tr></table></figure><h2 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h2><ul><li>在使用requests库发起网络请求时如果请求头中要求携带请求的cookie，那么一般的写法如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;&apos;cookie&apos;:cookie&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上方式将cookie加进请求头中，但是当请求的资源返回302，也就是发生重定向时跳转的页面时无法获取我们添加的cookie的，从而导致跳转后的请求过期，如果是登陆系统那么则会自动登出账号，虽然我们发起登陆请求时确实通过了服务器验证，但是由于跳转之后没有cookie那么服务端会认为此次请求已经过期。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>想让重定向请求携带上一次请求的cookie则应如下修改代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = url</span><br><span class="line">header = &#123;key:value&#125;</span><br><span class="line">body = &#123;key:value&#125;</span><br><span class="line">cookie = &#123;&apos;cookie&apos;:cookie&#125;</span><br><span class="line"></span><br><span class="line"># 发起post请求通过服务器验证</span><br><span class="line">response = requests.post(url,header,body,cookie=cookie)</span><br></pre></td></tr></table></figure><blockquote><p>如上代码将cookie单独构建并添加进方法内，这样重定向后的请求会获取我们登陆时的cookie<br>保证重定向后的请求不会失效。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用nginx部署django项目</title>
      <link href="/2018/12/01/%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/12/01/%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用nginx部署django项目"><a href="#使用nginx部署django项目" class="headerlink" title="使用nginx部署django项目"></a>使用nginx部署django项目</h1><h2 id="安装nginx环境-ubuntu服务器"><a href="#安装nginx环境-ubuntu服务器" class="headerlink" title="安装nginx环境(ubuntu服务器)"></a>安装nginx环境(ubuntu服务器)</h2><ul><li>安装nginx和需要的包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-dev nginx</span><br></pre></td></tr></table></figure><ul><li>安装pip3</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><ul><li>安装supervisor进程管理工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install supervisor</span><br></pre></td></tr></table></figure><h2 id="使用uwsgi来部署"><a href="#使用uwsgi来部署" class="headerlink" title="使用uwsgi来部署"></a>使用uwsgi来部署</h2><ul><li>安装uwsgi</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install uwsgi --upgrade</span><br></pre></td></tr></table></figure><ul><li>使用uwsgi运行项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :portnumber --chdir /path/to/project --home=/path/to/env --module project.wsgi</span><br></pre></td></tr></table></figure><ul><li>服务器需要开放相关端口</li></ul><blockquote><p>使用客户端访问项目之前需要打开服务器对应的TCP端口，否则外部无法访问</p></blockquote><ul><li>运行项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:portnumber</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图像处理KNN算法</title>
      <link href="/2018/11/23/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2018/11/23/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KNN处理算法"><a href="#KNN处理算法" class="headerlink" title="KNN处理算法"></a>KNN处理算法</h1><ul><li><p>算法思想：</p><blockquote><p>使用待处理像素周围元素集合中数值最接近待处理元素的元素替换待处理元素</p></blockquote></li><li><p>数学表达式：</p><blockquote><p>image[i][j] =  (imgae[i-1][j-1] , image[i][j-1] , image[i+1][j-1] ,<br>image[i-1][j] , image[i+1][j] ,<br>image[i-1][j+1] , image[i][j+1] , image[i+1][j+1]).closedValue()</p></blockquote></li><li><p>代码实现：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    private static int knnfilter(int[][] image) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            System.out.println(&quot;请输入图片的m，n值：&quot;);</span><br><span class="line">            int m = sc.nextInt();</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            image = new int[m][n];</span><br><span class="line">            newImage = new int[m][n];</span><br><span class="line">            for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                    image[i][j] = sc.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;原图片的数值为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(image));</span><br><span class="line">            for (int i = 1; i &lt; m - 1; i++) &#123;</span><br><span class="line">                for (int j = 1; j &lt; n - 1; j++) &#123;</span><br><span class="line">                    int[] array = new int[]&#123;image[i - 1][j - 1], image[i][j - 1], image[i + 1][j - 1],</span><br><span class="line">                            image[i - 1][j], image[i + 1][j],</span><br><span class="line">                            image[i - 1][j + 1], image[i][j + 1], image[i + 1][j + 1]&#125;;</span><br><span class="line">                    int index = 0;</span><br><span class="line">                    int temp = Integer.MAX_VALUE;</span><br><span class="line">                    for (int k = 0; k &lt; array.length; k++) &#123;</span><br><span class="line">                        int abs = Math.abs(image[i][j] - array[k]);</span><br><span class="line">                        if (abs &lt; temp) &#123;</span><br><span class="line">                            index = k;</span><br><span class="line">                            temp = abs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    newImage[i][j] = array[index];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;经过K近邻滤波后的图片为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(newImage));</span><br><span class="line">            return 0;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN处理算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图像处理中值算法</title>
      <link href="/2018/11/22/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2018/11/22/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B8%AD%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="中值处理算法"><a href="#中值处理算法" class="headerlink" title="中值处理算法"></a>中值处理算法</h1><ul><li><p>算法思想：</p><blockquote><p>使用待处理像素的周围像素的中值来代替待处理元素</p></blockquote></li><li><p>数学表达式：</p><blockquote><p>image[i][j] =  (imgae[i-1][j-1] , image[i][j-1] , image[i+1][j-1] ,<br>image[i-1][j] , image[i+1][j] ,<br>image[i-1][j+1] , image[i][j+1] , image[i+1][j+1]).midValue()</p></blockquote></li><li><p>代码实现：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">private static int medianfilter(int[][] image) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            System.out.println(&quot;请输入图片的m，n值：&quot;);</span><br><span class="line">            int m = sc.nextInt();</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            image = new int[m][n];</span><br><span class="line">            newImage = new int[m][n];</span><br><span class="line">            for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                    image[i][j] = sc.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;原图片的数值为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(image));</span><br><span class="line">            Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">            for (int i = 1; i &lt; m - 1; i++) &#123;</span><br><span class="line">                for (int j = 1; j &lt; n - 1; j++) &#123;</span><br><span class="line">                    set.add(image[i-1][j-1]);</span><br><span class="line">                    set.add(image[i][j-1]);</span><br><span class="line">                    set.add(image[i+1][j-1]);</span><br><span class="line">                    set.add(image[i-1][j]);</span><br><span class="line">                    set.add(image[i+1][j]);</span><br><span class="line">                    set.add(image[i-1][j+1]);</span><br><span class="line">                    set.add(image[i][j+1]);</span><br><span class="line">                    set.add(image[i+1][j+1]);</span><br><span class="line">                    Integer[] temp=new Integer[0];</span><br><span class="line">                    Integer[] array = set.toArray(temp);</span><br><span class="line">                    Arrays.sort(array);</span><br><span class="line">                    newImage[i][j] = array[(array.length / 2)];</span><br><span class="line">                    set.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;经过中值滤波后的图片为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(newImage));</span><br><span class="line">            return 0;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中值处理算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图像处理均值算法</title>
      <link href="/2018/11/22/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9D%87%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2018/11/22/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9D%87%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="均值处理算法"><a href="#均值处理算法" class="headerlink" title="均值处理算法"></a>均值处理算法</h1><ul><li><p>算法思想：</p><blockquote><p>计算待处理像素的周围元素的均值来代替待处理像素</p></blockquote></li><li><p>数学表达式：</p><blockquote><p>image[i][j] = (imgae[i-1][j-1] + image[i][j-1] + image[i+1][j-1] +<br>image[i-1][j] + image[i+1][j] +<br>image[i-1][j+1] + image[i][j+1] + image[i+1][j+1])/8</p></blockquote></li><li><p>代码实现：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private static int meanfilter(int[][] image) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            System.out.println(&quot;请输入图片的m，n:&quot;);</span><br><span class="line">            int m = sc.nextInt();</span><br><span class="line">            int n = sc.nextInt();</span><br><span class="line">            image = new int[m][n];</span><br><span class="line">            newImage = new int[m][n];</span><br><span class="line">            for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                    image[i][j] = sc.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;原图片的数值为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(image));</span><br><span class="line">            for (int i = 1; i &lt; m - 1; i++) &#123;</span><br><span class="line">                for (int j = 1; j &lt; n - 1; j++) &#123;</span><br><span class="line">                    newImage[i][j] = (image[i - 1][j - 1] + image[i][j - 1] + image[i + 1][j - 1] + image[i - 1][j] + image[i + 1][j] +</span><br><span class="line">                            image[i - 1][j + 1] + image[i][j + 1] + image[i + 1][j + 1]) / 8;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;经过均值滤波后的图片数值为：&quot;);</span><br><span class="line">            System.out.println(Arrays.deepToString(newImage));</span><br><span class="line">            return 0;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机图形处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 均值处理算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android如何测试网络连通性</title>
      <link href="/2018/11/21/Android%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A%E6%80%A7/"/>
      <url>/2018/11/21/Android%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Android如何测试网络是否可用"><a href="#Android如何测试网络是否可用" class="headerlink" title="Android如何测试网络是否可用"></a>Android如何测试网络是否可用</h1><ul><li>通过执行ping命令并获取命令的返回值，代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isNetPingUsable()&#123;</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    try&#123;</span><br><span class="line">        Process process = runtime.exec(&quot;ping -c 1 www.baidu.com&quot;);</span><br><span class="line">        int ret = process.waitFor();</span><br><span class="line">        if(ret == 0)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ret=0时：当前网络可用<br>ret=1时：需要网页认证的wifi<br>ret=2时：当前网络不可用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android开发实用解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通知栏沉浸解决方案</title>
      <link href="/2018/11/21/%E9%80%9A%E7%9F%A5%E6%A0%8F%E6%B2%89%E6%B5%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/11/21/%E9%80%9A%E7%9F%A5%E6%A0%8F%E6%B2%89%E6%B5%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="通知栏沉浸解决方案"><a href="#通知栏沉浸解决方案" class="headerlink" title="通知栏沉浸解决方案"></a>通知栏沉浸解决方案</h1><p>onCreate方法中添加如下代码</p><p>//透明状态栏        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</p><p>//透明导航栏       getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</p>]]></content>
      
      
      <categories>
          
          <category> Android开发实用解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通知栏沉浸 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现圆角Button</title>
      <link href="/2018/11/21/%E5%AE%9E%E7%8E%B0%E5%9C%86%E8%A7%92Button/"/>
      <url>/2018/11/21/%E5%AE%9E%E7%8E%B0%E5%9C%86%E8%A7%92Button/</url>
      
        <content type="html"><![CDATA[<p>在drawable文件夹下建立xml文件</p><p>根元素为shape -&gt; 指定背景填充色(标签solid) -&gt; 设置圆角弧度(标签corners,属性radius)</p><p>设置button的background属性为@drawable/xxxx</p>]]></content>
      
      
      <categories>
          
          <category> Android开发实用解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android控件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识Django</title>
      <link href="/2018/11/21/%E5%88%9D%E8%AF%86Django/"/>
      <url>/2018/11/21/%E5%88%9D%E8%AF%86Django/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个Django工程"><a href="#第一个Django工程" class="headerlink" title="第一个Django工程"></a>第一个Django工程</h1><h2 id="Django工程目录"><a href="#Django工程目录" class="headerlink" title="Django工程目录"></a>Django工程目录</h2><ul><li>project name<ul><li>project name[项目容器]<ul><li><strong>init</strong>.py[一个空文件告诉python该工程是一个python工程]</li><li>settings.py[该Django项目的配置和设置文件]</li><li>urls.py[该Django项目的url声明，一份由Django驱动的网站目录]</li><li>wsgi.py[一个WSGI兼容的WEB服务器的入口，以便运行项目]</li></ul></li><li>manage.py[一个实用的命令行工具，可让你以各种方式与该Django项目进行交互]</li></ul></li></ul><h2 id="视图和URL配置"><a href="#视图和URL配置" class="headerlink" title="视图和URL配置"></a>视图和URL配置</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li>自定义视图：自定义一个py文件并编写相关方法。</li></ul><h3 id="URL配置"><a href="#URL配置" class="headerlink" title="URL配置"></a>URL配置</h3><pre><code>from django.conf.urls import urlfrom . import viewurlpatterns = [ url(r&apos;^$&apos;, view.hello),]</code></pre><blockquote><p>导入url配置的包和视图的包<br>定义用户访问对应url后执行的代码</p></blockquote><h3 id="url-方法"><a href="#url-方法" class="headerlink" title="url()方法"></a>url()方法</h3><blockquote><p>该方法有四个参数对应参数的具体意义为：</p></blockquote><ul><li>regex: 正则表达式，与之匹配的 URL 会执行对应的第二个参数 view。</li><li>view: 用于执行与正则表达式匹配的 URL 请求。</li><li>kwargs: 视图使用的字典类型的参数。</li><li>name: 用来反向获取 URL。</li></ul><h2 id="Django中的MVC"><a href="#Django中的MVC" class="headerlink" title="Django中的MVC"></a>Django中的MVC</h2><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><ul><li>将视图文件存储在project name/templates目录下，写成html文件</li><li>在view中使用render()函数将html返回给用户。</li></ul><h3 id="render-函数"><a href="#render-函数" class="headerlink" title="render()函数"></a>render()函数</h3><ul><li>参数<blockquote><p>request:通用参数<br>template_name:我们定义的模版（html文件）名<br>context:要传入文件中渲染呈现的数据，默认是字典格式<br>content_type:生成的文档要使用的MIME类型，默认为DEFAULT_CONTENT_TYPE设置的值<br>status:http的响应代码:默认是200<br>using:用于加载模版所使用的模版引擎名称</p></blockquote></li></ul><h2 id="Django模版中常用的语法规则"><a href="#Django模版中常用的语法规则" class="headerlink" title="Django模版中常用的语法规则"></a>Django模版中常用的语法规则</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li><p>if语句</p><pre><code>{% if condition %}            ...display        {% endif %}</code></pre></li><li><p>if-elseif-else</p><pre><code>{% if condition1 %}            ...display1        {% elif condition2 %}            ...display2        {% else %}            ...display3        {% endif %}</code></pre></li></ul><blockquote><p>if语句接受and、or或者not对多个变量进行判断<br>根据判断条件进行输出数据</p></blockquote><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul><li><p>for循环</p><pre><code>{% for athlete in athlete_list %}        ...        {% endfor %}</code></pre></li><li><p>逆序迭代</p><pre><code>{% for athlete in athlete_list reversed %}        ...        {% endfor %}</code></pre></li></ul><blockquote><p>模版会渲染标签之间的所有语句        </p></blockquote><h3 id="比较语句"><a href="#比较语句" class="headerlink" title="比较语句"></a>比较语句</h3><ul><li><p>ifequal语句</p><pre><code>{% ifequal user currentuser %}        ...        {% endifequal %}</code></pre></li><li><p>ifnotequal语句</p><pre><code>{% ifnotequal user currentuser %}        ...        {% endifnotequal %}</code></pre></li></ul><blockquote><p>ifequal和ifnotequal语句都支持可选的else语句</p></blockquote><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><ul><li>注释标签的使用方法</li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul><li><p>小写过滤器</p><pre><code>{% raw %}name|lower{% endraw %}</code></pre></li></ul><blockquote><p>name在被过滤器过滤后文档内容会被转换为小写</p></blockquote><ul><li><p>过滤管道的嵌套</p><pre><code>{% raw %}my_list|first|upper{% endraw %}</code></pre></li></ul><blockquote><p>元素经过第一个过滤器过滤之后的元素可以作为下一个过滤器的输入元素<br>将my_list列表的第一个元素转换为大写形式</p></blockquote><ul><li><p>带参数的过滤器</p><pre><code>{% raw %}bio|truncatewords:"30"{% endraw %}</code></pre></li></ul><blockquote><p>过滤器的参数总是跟随在冒号后并且总以双引号包含<br>这个过滤器将显示bio的前30个词</p></blockquote><ul><li><p>其他过滤器</p><ul><li>addslashes:添加反斜杠到任何反斜杠/单引号/双引号前面</li><li><p>date:按指定格式字符串参数格式化date或者datetime对象，实例：</p>  pub_date|date:"F j,Y"</li><li><p>length:返回变量的长度</p></li></ul></li></ul><h3 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h3><ul><li><p>include标签</p><pre><code>{% include "nav.html" %}</code></pre></li></ul><blockquote><p>include标签允许在模版中包含其他的模版内容</p></blockquote><h3 id="模版继承"><a href="#模版继承" class="headerlink" title="模版继承"></a>模版继承</h3><ul><li><p>模版继承</p><ul><li><p>继承语法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;&#123;% extends &quot;base.html&quot; %&#125;&lt;/code&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 可被重载的块    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;code&gt;&#123;% block blockname %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endblock %&#125;&lt;/code&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id="Django-模型"><a href="#Django-模型" class="headerlink" title="Django 模型"></a>Django 模型</h2><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><ul><li><p>setting.py文件中DATABASES语句块内的内容</p><pre><code>DATABASES = {    &apos;default&apos;: {        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,  # 或者使用 mysql.connector.django        &apos;NAME&apos;: &apos;数据库名&apos;,        &apos;USER&apos;: &apos;用户名&apos;,        &apos;PASSWORD&apos;: &apos;密码&apos;,        &apos;HOST&apos;:&apos;主机名&apos;,        &apos;PORT&apos;:&apos;端口号&apos;,    }}</code></pre><h3 id="新建一个App"><a href="#新建一个App" class="headerlink" title="新建一个App"></a>新建一个App</h3></li><li><p>进入终端输入如下指令：</p><pre><code>python3 manager.py startapp appname</code></pre></li><li><p>App中models的作用</p><blockquote><p>models是具体数据的抽象化</p></blockquote></li><li><p>声明App</p><blockquote><p>在setting.py的INSTALLED_APPS模块下添加新建的AppName</p></blockquote></li><li><p>创建model</p><blockquote><p>在projectName/appName/models.py文件中创建类(数据类)如下：</p></blockquote><pre><code>from django.db import models class Data(models.Model):    name = models.CharField(max_length=20)  #字符类型数据，最大长度为20</code></pre></li><li><p>根据models创建表结构</p><blockquote><p>在命令行中运行如下代码：</p></blockquote><pre><code>python3 manager.py migrate #创建表结构python3 manager.py makemigrations #通知Django我们的模型有变更python3 manager.py migrate #创建表结构</code></pre></li></ul><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ul><li><p>在projectName/projectName/下创建operatedb.py文件添加代码如下</p><pre><code>from django.http import HttpResponsefrom projectName/appName import Datadef addData(request):    data = Data(name=&apos;zh_eastsun&apos;)    data.save()    return HttpResponse(&apos;&lt;p&gt;数据添加成功&lt;/p&gt;&apos;)</code></pre></li></ul><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ul><li><p>在peojectName/projectName/operatedb.py文件中添加如下代码：</p><pre><code>def getData(request):    response = &quot;&quot;    # 获取数据库中的所有数据    list = Data.objects.all()    # 根据筛选条件获取某条数据    response = Data.objects.filter(id=1)    # 获取某个单个数据    response = Data.objects.get(id=1)</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MySQL基础命令</title>
      <link href="/2018/11/21/MySQL%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/11/21/MySQL%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在终端下执行的每条指令必须以’；’结尾</p><p>进入数据库：<br>./mysql -u root(用户名) -p(密码登录)</p><p>显示所有数据库：<br>show databases;</p><p>创建一个数据库：<br>create database +database name;</p><p>删除一个数据库：<br>drop database +database name;</p><p>进入一个数据库：<br>use +database name;</p><p>显示所有数据表：<br>show tables;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2018/11/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<center>我创建了第一篇博客</center>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/20/hello-world/"/>
      <url>/2018/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
